lsr r3, #4
lsr r3, #4
swl r3, #0			#0 will hold current LSW memory address (0)
add r3, #1
swl r3, #1			#1 will hold current MSW memory address (1)
lsl r3, #1
add r3, #1
lsl r3, #1
add r3, #1
lsl r3, #1
add r3, #1
lsl r3, #1
swl r3, #2			#2 will hold current LSW output address (30)
add r3, #1
swl r3, #3			#3 will hold current MSW output address (31)

#0 JUMP SHOULD LAND ON NEXT LINE
lsr r0, #4
lsr r0, #4			# Sets r0 to 0
seq #1			    # Sets Jump register to 0
lwl r3, #0
lw  r2, r3			# r2 = 1101 1001 = LSW(original)

lwl r3, #1
lw  r1, r3			# r1 = 0000 0101 = MSW(original)
lsl r1, #5			# r1 = 1010 0000
lsr r2, #4			# r2 = 0000 1101
lsl r2, #1			# r2 = 0001 0110
xor r1, r2			# r1 = 1011 0110
lwl r3, #3
sw  r1, r3			# Storing MSW(shifted) into output address

lwl r3, #0
lw  r1, r3			# r1 = 1101 1001
mov r2, r1			# r2 = 1101 1001
lsr r1, #1			# r1 = 0110 1100
lsl r1, #5			# r1 = 1000 0000
lsl r2, #7 		    # r2 = 1000 0000
lsr r2, #4 		    # r2 = 0000 1000
xor r1, r2			# r1 = 1000 1000
lwl r3, #2
sw  r1, r3			# Storing LSW(shifted) into output address

//p8 = b5^b6^b7^b8^b9^b10^b11
lwl r3, #1
lw  r1, r3			# r1 = 0000 0101 = MSW(original)
mov r2, r1, #0		# r2 = 0000 0101
mov r3, r1, #0		# r3 = 0000 0101
msk r3, #1 		   # r3 = 0000 0000 = b10 
lsr r3, #1			# r3 = 0000 0000
lsr r2, #2			# r2 = 0000 0001 = b11
xor r3, r2			# r3 = 0000 0001 = b10^b11
msk r1, #0 		# r1 = 0000 0001 = b9
xor r1, r3			# r1 = 0000 0000 = b9^b10^b11

lwl r3, #0
lw  r2, r3			# r2 = 1101 1001 = LSW(original)
mov r3, r2, #0		# r3 = 1101 1001
lsr r3, #7			# r3 = 0000 0001 = b8
xor r1, r3			# r1 = 0000 0001 = b8^b9^b10^b11
swl r1, #4			#4 will Store b8^b9^b10^b11 because p4 uses it

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #1			# r3 = 1011 0010
lsr r3, #7			# r3 = 0000 0001 = b7
xor r1, r3			# r1 = 0000 0000 = b7^b8^b9^b10^b11

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #2			# r3 = 0110 0100
lsr r3, #7			# r3 = 0000 0000 = b6
xor r1, r3			# r1 = 0000 0000 = b6^b7^b8^b9^b10^b11

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #3			# r3 = 1100 1000
lsr r3, #7			# r3 = 0000 0001 = b5
xor r1, r3			# r1 = 0000 0001 = b5^b6^b7^b8^b9^b10^b11 = p8
//r0 will be holding the parities for p0
mov r0, r1 		# r0 = 0000 0001 = b5^b6^b7^b8^b9^b10^b11
xor r0, r1			# r0 = 0000 000D = b5^b6^b7^b8^b9^b10^b11^p8

lwl r3, #3
lw  r2, r3 		# r2 = 1011 0110 MSW(shifted)
xor r1, r2 		# r1 = 1011 0111 = MSW(encoded)
sw  r1, r3 		# Storing MSW(encoded) into output address

//p4 = b2^b3^b4^b8^b9^b10^b11
lwl r1, #4			# r1 = b8^b9^b10^b11
lwl r3, #0
lw  r2, r3			# r2 = 1101 1001 = LSW(original)
mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #4			# r3 = 1001 0000
lsr r3, #7			# r3 = 0000 0001 = b4
xor r1, r3			# r1 = 0000 0001 = b4^b8^b9^b10^b11


mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #5			# r3 = 0010 0000
lsr r3, #7			# r3 = 0000 0000 = b3
xor r1, r3			# r1 = 0000 0001 = b3^b4^b8^b9^b10^b11
xor r0, r3			# r0 = b3^b4^b5^b6^b7^b8^b9^b10^b11^p8

lsl r2, #6			# r2 = 0100 0000
lsr r2, #7			# r2 = 0000 0000 = b2
xor r0, r2			# r0 = b2^b3^b4^b5^b6^b7^b8^b9^b10^b11^p8
xor r1, r2			# r1 = b2^b3^b4^b8^b9^b10^b11 = p4
xor r0, r1			# r0 = b2^b3^b4^b5^b6^b7^b8^b9^b10^b11^p8^p4
lsl r1, #2			# r1 = 0000 0400



//p2 = b1^b3^b4^b6^b7^b10^b11
lwl r3, #1
lw  r2, r3			# r2 = 0000 0101 = MSW(original)
mov r3, r2, #0		# r3 = 0000 0101
lsr r3, #2			# r3 = 0000 0001 = b11
xor r1, r3			# r1 = 0000 0401

lsl r2, #6			# r2 = 0000 0000
lsr r2, #7			# r2 = 0000 0000 = b10
xor r1, r2			# r1 = 0000 040X = b11^b10

lwl r3, #0
lw  r2, r3			# r2 = 1101 1001 = LSW(original)
mov r3, r2, #0		# r3 = 1101 1001
msk r3, #0			# r3 = 0000 0001 = b1
xor r1, r3			# r1 = 0000 040X = b11^b10^b1
xor r0, r3			# r0 = b1^b2^b3^b4^b5^b6^b7^b8^b9^b10^b11^p8^p4

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #1			# r3 = 1011 0010
lsr r2, #7			# r2 = 0000 0001 = b7
xor r1, r3			# r1 = 0000 040X = b11^b10^b1^b7

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #2			# r3 = 0110 0100 
lsr r2, #7			# r2 = 0000 0000 = b6
xor r1, r3			# r1 = 0000 040X = b11^b10^b1^b7^b6

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #4			# r3 = 1001 0000 
lsr r2, #7			# r2 = 0000 0001 = b4
xor r1, r3			# r1 = 0000 040X = b11^b10^b1^b7^b6^b4 

lsl r2, #5			# r2 = 0010 0000 
lsr r2, #7			# r2 = 0000 0000 = b3
xor r1, r2			# r1 = 0000 0402 = b11^b10^b1^b7^b6^b4^b3 = p2
xor r0, r1			# r0=b1^b2^b3^b4^b5^b6^b7^b8^b9^b10^b11^p8^p4^p2
lsl r1, #1			# r1 = 0000 4020

//p1 = b1^b2^b4^b5^b7^b9^b11
lwl r3, #1
lw  r2, r3			# r2 = 0000 0101 = MSW(original)
mov r3, r2, #0		# r3 = 0000 0101
lsr r3, #2			# r3 = 0000 0001 = b11
xor r1, r3			# r1 = 0000 4021 

lsl r2, #6			# r2 = 1000 0000
lsr r2, #7			# r2 = 0000 0001 = b9
xor r1, r2			# r1 = 0000 402Y = b11^b9

lwl r3, #0
lw  r2, r3			# r2 = 1101 1001 = LSW(original)
mov r3, r2, #0		# r3 = 1101 1001
msk r3, #0			# r3 = 0000 0001 = b1
xor r1, r3			# r1 = 0000 402Y = b11^b9^b1


mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #1			# r3 = 1011 0010 
lsr r3, #7			# r3 = 0000 0001 = b7
xor r1, r3			# r1 = 0000 402Y = b11^b9^b1^b7

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #3			# r3 = 1100 1000 
lsr r3, #7			# r3 = 0000 0001 = b5
xor r1, r3			# r1 = 0000 402Y = b11^b9^b1^b7^b5

mov r3, r2, #0		# r3 = 1101 1001
lsl r3, #4			# r3 = 1001 0000 
lsr r3, #7			# r3 = 0000 0001 = b4
xor r1, r3			# r1 = 0000 402Y = b11^b9^b1^b7^b5^b4
lsl r2, #6			# r2 = 0100 0000
lsr r2, #7			# r2 = 0000 0000 = b2
xor r1, r2			# r1 = 0000 4021 = p1
xor r0, r1			# r0 = p0

lsl r1, #1			# r1 = 0004 0210
xor r1, r0			# r1 = 0004 0210 = p4,p2,p1,p0

lwl r3, #2
lw  r2, r3			# r2 = 1000 1000 = LSW(shifted)
xor r1, r2			# r1 = 1004 1210 = LSW(encoded)
sw  r1, r3			# Storing LSW(encoded) into output address

lwl r0, #3
add r0, #2			# Increment MSW output address by 2
swl r0, #3
lwl r0, #2
add r0, #2			# Increment LSW output address by 2
swl r0, #2
lwl r0, #1
add r0, #2			# Increment MSW input address by 2
swl r0, #1
lwl r0, #0
add r0, #2			# Increment LSW input address by 2
swl r0, #0

sne #30			# Jump reg = 1 if r0 (lwl #0) does not hold 30
bol #0			# if Jr = 1, branch to the PC address saved in 
the LUT_pc entry #0 
# raise done flag
